#!/bin/bash

# -------------------------------------------------------------------------
# mpkgclean: A simple cache cleaner for local makepkg (pacman) packages [1]
# -------------------------------------------------------------------------
# Copyright (c) 2011-2013 Rashif Ray Rahman <schiv@archlinux.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -------------------------------------------------------------------------
# [1] https://www.archlinux.org/pacman/
# -------------------------------------------------------------------------

if [[ "$1" == '-h' || "$1" == '--help' ]]; then
	echo "usage: cd [PKGDEST] && $(basename $0)"
	echo
	echo "  $(basename $0) removes all but the latest pacman binary package"
	echo "  in a directory of multiple packages. Intended for those who"
	echo "  use PKGDEST with makepkg, but can be run from any directory."
	exit 0
fi

get_fext() {
	echo $1 | rev | awk -F "-" '{print $1}' | rev
}

get_pver() {
	echo $1 | rev | awk -F "-" '{print $2"-"$3}' | rev
}

get_pname() {
	local fext pver

	fext=$(get_fext $1)
	pver=$(get_pver $1)

	echo ${1/-$pver-$fext}
}

# clean package extensions first
echo -n "Getting rid of old package formats..."

for pfile in *.pkg.tar.*; do
	# exit cleanly if nothing was found
	if [[ "$pfile" = '*.pkg.tar.*' ]]; then
		echo "none found"
		echo "No packages found, nothing to do."
		exit 0
	fi

	fext=$(get_fext $pfile)
	pver=$(get_pver $pfile)
	pname=${pfile/-$pver-$fext}
	parch=${fext/.*}

	# just edit the RE for more formats
	id=$pname-$pver-$parch.pkg.tar
	pext_matches=($(\ls -v $id.[gx]z))

	if [[ ${#pext_matches[@]} -gt 1 ]]; then
		for match in ${pext_matches[@]}; do
			[[ "$match" != "$id.xz" ]] && \
				rm -f $match && oldremoved=1
		done
	fi
done

[[ $oldremoved -eq 1 ]] && echo "done" || echo "none found"

# now clean the rest
for pfile in *.pkg.tar.*; do
	fext=$(get_fext $pfile)
	pver=$(get_pver $pfile)
	pname=${pfile/-$pver-$fext}
	parch=${fext/.*}

	matches=($(\ls -v $pname-*-$parch.*))

	# for cases like foo, foo-bar, prevent mixing them up
	for oldpkg in $(seq 0 $((${#matches[@]} - 1))); do
		oldname=$(get_pname ${matches[$oldpkg]})
		[[ "$oldname" != "$pname" ]] && unset matches[$oldpkg]
	done

	t_matches=${#matches[@]}

	# if only one match then obviously nothing to do
	[[ $t_matches -eq 1 ]] && continue

	# get oldest and newest versions
	oldest=$(get_pver ${matches[0]})
	newest=$(get_pver ${matches[$t_matches-1]})

	echo "Cleaning $pname [$oldest -> $newest] ($parch)"

	# WARNING: logic based on ls natural version sort order;
	#	some types of versioning may fail this order
	#	last item is assumed latest
	for oldpkg in $(seq 0 $(($t_matches - 2))); do
		rm -f ${matches[$oldpkg]} && pkgremoved=1
	done
done

[[ $pkgremoved -ne 1 ]] && echo "All clear, nothing to clean."

# vim:set ts=4 sw=4 noet:
